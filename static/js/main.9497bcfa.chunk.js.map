{"version":3,"sources":["images/xe_logo.svg","modules/ParallaxBackground.js","modules/Header.js","pages/Home.js","pages/Creations.js","pages/Contact.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ParallaxBackground","props","className","src","logo","alt","id","onClick","handleChangePage","href","Header","isElementActive","currentPage","docked","Index","state","Component","App","headerDocked","previousPage","animCounter","Components","Home","Creations","Contact","About","e","currentTarget","setState","handleScroll","event","scrollTop","document","getElementById","offsetTop","window","innerHeight","handleTransitionVisibility","content","currentAnimClass","addEventListener","this","removeEventListener","CurrentPageComponent","PreviousPageComponent","unselectable","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9497bcfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xe_logo.8c861a22.svg\";","import React from 'react';\r\nimport logo from '../images/xe_logo.svg'\r\n\r\nimport './ParallaxBackground.css';\r\n\r\nconst ParallaxBackground = (props) => {\r\n  return (\r\n    <div className=\"parallax-module-container\">\r\n      <div className=\"parallax-container\"></div>\r\n      <img className=\"parallax-logo\" src={logo} alt=\"\" />\r\n      <div className=\"main-header\">\r\n        <h1>xethlyx</h1>\r\n        <a id=\"Contact\" onClick={props.handleChangePage} href=\"#navbar\">CONTACT</a>\r\n        <a id=\"About\" onClick={props.handleChangePage} href=\"#navbar\">ABOUT</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ParallaxBackground;","import React from 'react';\r\nimport logo from '../images/xe_logo.svg';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = (props) => {\r\n  function isElementActive(id) {\r\n    if (props.currentPage === id) {\r\n      return(\"active\")\r\n    } else {\r\n      return(\"\")\r\n    }\r\n  }\r\n\r\n  function getNavbarClasses() {\r\n    if (props.docked) {\r\n      return(\"navbar docked\")\r\n    } else {\r\n      return(\"navbar\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"navbar\" className={getNavbarClasses()}>\r\n        <a href=\"#begin\" className=\"website-icon-container\"><img src={logo} alt=\"XE\"/></a>\r\n        <ul>\r\n            <li><a id=\"Home\" className={isElementActive(\"Home\")} onClick={props.handleChangePage} href=\"#navbar\">Home</a></li>\r\n            <li><a id=\"Creations\" className={isElementActive(\"Creations\")} onClick={props.handleChangePage} href=\"#navbar\">Creations</a></li>\r\n            <li><a id=\"Contact\" className={isElementActive(\"Contact\")} onClick={props.handleChangePage} href=\"#navbar\">Contact</a></li>\r\n            <li><a id=\"About\" className={isElementActive(\"About\")} onClick={props.handleChangePage} href=\"#navbar\">About</a></li>\r\n        </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    \r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Xethlyx's Personal Website</h2>\r\n\t\t\t\t<p>Hello, welcome to my personal website! If you need to reach me for any reason, my contact info is available in the Contact tab.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index;","import React, { Component } from 'react';\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    \r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Creations</h2>\r\n        <p>It's empty here.</p>\r\n        <p>You can find all of my recent creations on <a href=\"https://github.com/xethlyx/\">Github</a>.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index;","import React, { Component } from 'react';\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    \r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Contact</h2>\r\n\t\t\t\t<p>You can reach me at:</p>\r\n        <table><tbody>\r\n          <tr>\r\n            <td>Discord</td>\r\n            <td>xethlyx#8616</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Instagram</td>\r\n            <td><a href=\"https://instagram.com/xethlyx/\">@xethlyx</a></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Github</td>\r\n            <td><a href=\"https://github.com/xethlyx/\">xethlyx</a></td>\r\n          </tr>\r\n        </tbody></table>\r\n        <p>I reply the quickest via Discord and Email- if you need me use those first. I almost never check Instagram, nor do I get push notifications so any form of contact there is a lost cause.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index;","import React, { Component } from 'react';\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    \r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>About</h2>\r\n\t\t\t\t<p>This website is built on the React framework.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport ParallaxBackground from './modules/ParallaxBackground';\r\nimport Header from './modules/Header';\r\n\r\nimport Home from './pages/Home';\r\nimport Creations from './pages/Creations';\r\nimport Contact from './pages/Contact';\r\nimport About from './pages/About'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentPage : \"Home\",\r\n    headerDocked : true,\r\n    previousPage : \"Home\",\r\n    animCounter : 1\r\n  };\r\n\r\n  Components = {\r\n    Home : Home,\r\n    Creations : Creations,\r\n    Contact : Contact,\r\n    About : About\r\n  }\r\n\r\n  handleChangePage = (e) => {\r\n    if (this.state.currentPage !== e.currentTarget.id) {\r\n      this.setState({\r\n        previousPage : this.state.currentPage,\r\n        currentPage : e.currentTarget.id,\r\n        animCounter : this.state.animCounter + 1\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.getElementById(\"root\").addEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.getElementById(\"root\").removeEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  handleScroll = (event) => {\r\n    let scrollTop = document.getElementById(\"navbar\").offsetTop\r\n\r\n    if (window.innerHeight - scrollTop !== 52) {\r\n      if (this.state.headerDocked !== false) {\r\n        this.setState({\r\n          headerDocked: false\r\n        });\r\n      }\r\n    } else {\r\n      if (this.state.headerDocked !== true) {\r\n        this.setState({\r\n          headerDocked: true\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleTransitionVisibility = (content) => {\r\n    let currentAnimClass = \"anim-\" + content + \"-\" + (this.state.animCounter % 2 + 1)\r\n\r\n    if ((this.state.previousPage === this.state.currentPage) && (content === \"old\")) {\r\n      return(\"content hidden \" + content + \"-content \" + currentAnimClass)\r\n    } else {\r\n      return(\"content \" + content + \"-content \" + currentAnimClass)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let CurrentPageComponent = this.Components[this.state.currentPage]\r\n    let PreviousPageComponent = this.Components[this.state.previousPage]\r\n\r\n    return(\r\n      <div id=\"begin\" className=\"App\">\r\n        <ParallaxBackground handleChangePage={this.handleChangePage} />\r\n        <Header handleChangePage={this.handleChangePage} currentPage={this.state.currentPage} docked={this.state.headerDocked}/>\r\n        <div className=\"content-container\">\r\n          <div className={this.handleTransitionVisibility(\"current\")}>\r\n            <CurrentPageComponent />\r\n          </div>\r\n          <div unselectable=\"on\" className={this.handleTransitionVisibility(\"old\")}>\r\n            <PreviousPageComponent />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}